--BASE DE DATOS PDBA FINAL

CREATE TABLE usuario (
   idusuario    NUMBER,
   nombreusuario VARCHAR2(50),
   password      VARCHAR2(100),
   rol           VARCHAR2(20),
  CONSTRAINT PK_usuario PRIMARY KEY (idusuario)
);

insert into usuario(idusuario, nombreusuario, password, rol)
values ( 1,'admin','admin','administrador');

insert into usuario(idusuario, nombreusuario, password, rol)
values ( 2,'dani','dani','usuario');

SELECT * FROM USUARIO;
select * from bitacora;

CREATE TABLE bitacora (
   idbitacora NUMBER ,
   tabla VARCHAR2(30) ,
   campo VARCHAR2(30),
   llaveprimaria VARCHAR2(30),
   valoranterior VARCHAR2(255),
   valornuevo VARCHAR2(255),
   fechacreacion DATE,
   usuariocreacion VARCHAR2(50) ,
   tipomovimiento VARCHAR2(40) ,
   ipregistro VARCHAR2(50) ,
   CONSTRAINT PK_BITACORA PRIMARY KEY (idbitacora)
);

-- Definici�n de la tabla persona
CREATE TABLE persona (
   codigopersona NUMBER(10),
   primernombre VARCHAR2(50),
   segundonombre VARCHAR2(50),
   tercernombre VARCHAR2(50),
   primerapellido VARCHAR2(50),
   segundoapellido VARCHAR2(50),
   apellidocasada VARCHAR2(50),
   numdocidentificacion NUMBER(10),
   nit NUMBER(10),
   dpi NUMBER(10),
   numerotelefono NUMBER(10) ,
   fechanacimiento DATE,
   correo VARCHAR2(100),
   direccion VARCHAR2(100),
   departamento VARCHAR2(100),
   nombrepais VARCHAR2(50) ,
   CONSTRAINT PK_persona PRIMARY KEY (codigopersona)
);

-- Definici�n de la tabla cliente con relaci�n muchos a uno a la tabla persona
CREATE TABLE cliente (
   codigocliente NUMBER(10) ,
   fecharegistro DATE ,
   codigopersona NUMBER(10) ,
   CONSTRAINT PK_CLIENTE PRIMARY KEY (codigocliente),
   CONSTRAINT FK_PERSONA FOREIGN KEY (codigopersona) REFERENCES persona(codigopersona)
);

-- Definici�n de la tabla proveedor con relaci�n a persona (uno a muchos)
CREATE TABLE proveedor (
   codigoproveedor NUMBER(10) ,
   primernombre VARCHAR2(50),
   segundonombre VARCHAR2(50),
    primerapellido VARCHAR2(50),
   segundoapellido VARCHAR2(50),
   nit NUMBER(10),
   numerotelefono NUMBER(10) ,
   fechaproveedor DATE ,
   CONSTRAINT PK_proveedor PRIMARY KEY (codigoproveedor)
);

-- Definici�n de la tabla empleado con relaci�n a persona (uno a muchos)
CREATE TABLE empleado (
   codigoempleado NUMBER(10),
   fechaingreso DATE ,
   salariobase NUMBER(10, 2) ,
   fechaegreso DATE,
   CONSTRAINT PK_EMPLEADO PRIMARY KEY (codigoempleado)
);
select *from empleado;

----INDEPENDIENTES

CREATE TABLE laboratorio (
   codigolaboratorio NUMBER(10) ,
   ubicacionlaboratorio VARCHAR2(100),
   nombrelaboratorio VARCHAR2(100) ,
   encargadolaboratorio VARCHAR2(40) ,
   CONSTRAINT PK_LABORATORIO PRIMARY KEY (codigolaboratorio)
);


CREATE TABLE sucursal (
   codigosucursal NUMBER(10) ,
   fechaapertura DATE,
   fechacierre DATE,
   nombresucursal VARCHAR2(50) ,
   departamentosucursal VARCHAR2(50) ,
   CONSTRAINT PK_SUCURSAL PRIMARY KEY (codigosucursal)
);

CREATE TABLE tracking (
   codigotracking NUMBER(10) ,
   detalletracking VARCHAR2(100) ,
   CONSTRAINT PK_TRACKING PRIMARY KEY (codigotracking)
);

-- Definici�n de la tabla devoluciones con relaci�n a tipo devolucion (muchos a uno)
CREATE TABLE devoluciones (
   codigodevolucion NUMBER(10) ,
   fechadevolucion DATE ,
   cantidadproductos NUMBER(10) ,
   motivodevolucion VARCHAR2(255),
   descripciontipodevolucion VARCHAR2(100) ,
   CONSTRAINT PK_DEVOLUCIONES PRIMARY KEY (codigodevolucion)
);

-----FACTURACION
-- Definici�n de la tabla factura con relaci�n a detallefactura (uno a muchos)
CREATE TABLE factura (
   codigofactura NUMBER(10),
   fechaemicion DATE ,
   descuento NUMBER(10, 2),
   estatus VARCHAR2(50) ,   
   garantia VARCHAR2(50) ,
   producto VARCHAR2(45) ,
   cantidad NUMBER(10) ,
   preciounitario NUMBER(10, 2) ,
   impuestos NUMBER(10, 2) ,
   subtotal NUMBER(10, 2) ,
   total NUMBER(10, 2), ---procedimiento subirle el 12% de iva
   CONSTRAINT PK_FACTURA PRIMARY KEY (codigofactura)
);

-- Definici�n de la tabla metodo de pago
CREATE TABLE metododepago (
   codigometodo NUMBER(10),
   nombremetodo VARCHAR2(50) ,
   CONSTRAINT PK_METODO_PAGO PRIMARY KEY (codigometodo)
);

-----INVENTARIO MEDICAMENTOS
-- Definici�n de la tabla medicamento
CREATE TABLE medicamento (
   codigomedicamento NUMBER(10) ,
   lote VARCHAR2(30) , 
   nombrecomercial VARCHAR2(60) , 
   estado VARCHAR2(20) , 
   unidaddemedida NUMBER(10), 
   proporcion NUMBER(10) ,
   fechacreacion DATE ,
   fechaingreso DATE ,
   fechavencimiento DATE ,
   existencia NUMBER(10),
   costoventa NUMBER(10, 2) , 
   costocompra NUMBER(10, 2) ,
    principioactivo VARCHAR2(20), 
   CONSTRAINT PK_MEDICAMENTO PRIMARY KEY (codigomedicamento)
);

-- Sequence for usuario
CREATE SEQUENCE usuario_seq
START WITH 1
INCREMENT BY 1;

-- Sequence for bitacora
CREATE SEQUENCE bitacora_seq
START WITH 1
INCREMENT BY 1;

-- Sequence for persona
CREATE SEQUENCE persona_seq
START WITH 1
INCREMENT BY 1;

-- Sequence for cliente
CREATE SEQUENCE cliente_seq
START WITH 1
INCREMENT BY 1;

-- Sequence for proveedor
CREATE SEQUENCE proveedor_seq
START WITH 1
INCREMENT BY 1;

-- Sequence for empleado
CREATE SEQUENCE empleado_seq
START WITH 1
INCREMENT BY 1;
------------------------------------------------
-- Sequence for laboratorio
CREATE SEQUENCE laboratorio_seq
START WITH 1
INCREMENT BY 1;

-- Sequence for sucursal
CREATE SEQUENCE sucursal_seq
START WITH 1
INCREMENT BY 1;

-- Sequence for tipodevolucion
CREATE SEQUENCE devoluciones_seq
START WITH 1
INCREMENT BY 1;
-------------------------------------------------
-- Sequence for factura
CREATE SEQUENCE factura_seq
START WITH 1
INCREMENT BY 1;

-- Sequence for metododepago
CREATE SEQUENCE metododepago_seq
START WITH 1
INCREMENT BY 1;
-- Sequence for medicamento
CREATE SEQUENCE medicamento_seq
START WITH 1
INCREMENT BY 1;


--------------------------------------------------
CREATE OR REPLACE TRIGGER auditar_usuario
AFTER INSERT OR UPDATE OR DELETE ON usuario
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'usuario', 'idusuario', :old.idusuario, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/
CREATE OR REPLACE TRIGGER auditar_persona
AFTER INSERT OR UPDATE OR DELETE ON persona
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'persona', 'codigopersona', :old.codigopersona, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

CREATE OR REPLACE TRIGGER auditar_cliente
AFTER INSERT OR UPDATE OR DELETE ON cliente
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'cliente', 'codigocliente', :old.codigocliente, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/
CREATE OR REPLACE TRIGGER auditar_proveedor
AFTER INSERT OR UPDATE OR DELETE ON proveedor
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'proveedor', 'codigoproveedor', :old.codigoproveedor, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

CREATE OR REPLACE TRIGGER auditar_empleado
AFTER INSERT OR UPDATE OR DELETE ON empleado
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'empleado', 'codigoempleado', :old.codigoempleado, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

-- Trigger for the laboratorio table
CREATE OR REPLACE TRIGGER auditar_laboratorio
AFTER INSERT OR UPDATE OR DELETE ON laboratorio
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'laboratorio', 'codigolaboratorio', :old.codigolaboratorio, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

-- Trigger for the sucursal table
CREATE OR REPLACE TRIGGER auditar_sucursal
AFTER INSERT OR UPDATE OR DELETE ON sucursal
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'sucursal', 'codigosucursal', :old.codigosucursal, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

-- Trigger for the tracking table
CREATE OR REPLACE TRIGGER auditar_tracking
AFTER INSERT OR UPDATE OR DELETE ON tracking
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table for tracking
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'tracking', 'codigotracking', :old.codigotracking, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/


-- Trigger for the devoluciones table
CREATE OR REPLACE TRIGGER auditar_devoluciones
AFTER INSERT OR UPDATE OR DELETE ON devoluciones
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table for devoluciones
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'devoluciones', 'codigodevolucion', :old.codigodevolucion, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/


CREATE OR REPLACE TRIGGER auditar_factura
AFTER INSERT OR UPDATE OR DELETE ON factura
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'factura', 'codigofactura', :old.codigofactura, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

CREATE OR REPLACE TRIGGER auditar_metododepago
AFTER INSERT OR UPDATE OR DELETE ON metododepago
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'metododepago', 'codigometodo', :old.codigometodo, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

CREATE OR REPLACE TRIGGER auditar_medicamento
AFTER INSERT OR UPDATE OR DELETE ON medicamento
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'medicamento', 'codigomedicamento', :old.codigomedicamento, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/




--------------------------------------------------




CREATE OR REPLACE TRIGGER auditar_detallefactura
AFTER INSERT OR UPDATE OR DELETE ON detallefactura
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'detallefactura', 'codigodetalle', :old.codigodetalle, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

CREATE OR REPLACE TRIGGER auditar_estadofactura
AFTER INSERT OR UPDATE OR DELETE ON estadofactura
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'estadofactura', 'idestadofactura', :old.idestadofactura, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

CREATE OR REPLACE TRIGGER auditar_inventario
AFTER INSERT OR UPDATE OR DELETE ON inventario
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'inventario', 'codigoinventario', :old.codigoinventario, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/



-- Trigger for the tipodevolucion table
CREATE OR REPLACE TRIGGER auditar_tipodevolucion
AFTER INSERT OR UPDATE OR DELETE ON tipodevolucion
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'tipodevolucion', 'idtipodevolucion', :old.idtipodevolucion, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/



-- Trigger for the metodopago table
CREATE OR REPLACE TRIGGER auditar_metodopago
AFTER INSERT OR UPDATE OR DELETE ON metodopago
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'metodopago', 'codigometodo', :old.codigometodo, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

CREATE OR REPLACE TRIGGER auditar_estadoempleado
AFTER INSERT OR UPDATE OR DELETE ON estadoempleado
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'estadoempleado', 'idestadoempleado', :old.idestadoempleado, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

CREATE OR REPLACE TRIGGER auditar_estadogarantia
AFTER INSERT OR UPDATE OR DELETE ON estadogarantia
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'estadogarantia', 'codigogarantia', :old.codigogarantia, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

CREATE OR REPLACE TRIGGER auditar_producto
AFTER INSERT OR UPDATE OR DELETE ON producto
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'producto', 'codigoproducto', :old.codigoproducto, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/
CREATE OR REPLACE TRIGGER auditar_proveedor
AFTER INSERT OR UPDATE OR DELETE ON proveedor
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'proveedor', 'codigoproveedor', :old.codigoproveedor, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/


-- Trigger for the cliente table
CREATE OR REPLACE TRIGGER auditar_cliente
AFTER INSERT OR UPDATE OR DELETE ON cliente
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'cliente', 'codigocliente', :old.codigocliente, NULL, NULL, SYSDATE, v_tipomovimiento);

    -- Capture the changes in the related persona record
    IF v_tipomovimiento = 'Creaci�n' OR v_tipomovimiento = 'Edici�n' THEN
        INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
        VALUES (bitacora_seq.NEXTVAL, 'persona', 'codigopersona', :old.codigopersona, NULL, NULL, SYSDATE, v_tipomovimiento);
    END IF;
END;
/

-- Trigger for the empleado table
CREATE OR REPLACE TRIGGER auditar_empleado
AFTER INSERT OR UPDATE OR DELETE ON empleado
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table for empleado
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'empleado', 'codigoempleado', :old.codigoempleado, NULL, NULL, SYSDATE, v_tipomovimiento);

    -- Capture the changes in the related persona record
    IF v_tipomovimiento = 'Creaci�n' OR v_tipomovimiento = 'Edici�n' THEN
        INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
        VALUES (bitacora_seq.NEXTVAL, 'empleado', 'codigoempleado', :old.codigoempleado, NULL, NULL, SYSDATE, v_tipomovimiento);
    END IF;
END;
/


-- Trigger for the factura table
CREATE OR REPLACE TRIGGER auditar_factura
AFTER INSERT OR UPDATE OR DELETE ON factura
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table for factura
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'factura', 'codigofactura', :old.codigofactura, NULL, NULL, SYSDATE, v_tipomovimiento);

    -- Capture the changes in the related detallefactura records (if any)
    
END;
/

-- Trigger for the detallefactura table
CREATE OR REPLACE TRIGGER auditar_detallefactura
AFTER INSERT OR UPDATE OR DELETE ON detallefactura
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table for detallefactura
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'detallefactura', 'codigodetalle', :old.codigodetalle, NULL, NULL, SYSDATE, v_tipomovimiento);

    -- Capture the changes in the related factura record (many-to-one relationship)
    IF v_tipomovimiento = 'Creaci�n' OR v_tipomovimiento = 'Edici�n' THEN
        INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
        VALUES (bitacora_seq.NEXTVAL, 'factura', 'codigofactura', :old.comprobante, NULL, NULL, SYSDATE, v_tipomovimiento);
    END IF;
END;
/

-- Trigger for the factura_metodopago table
CREATE OR REPLACE TRIGGER auditar_factura_metodopago
AFTER INSERT OR DELETE ON factura_metodopago
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table for factura_metodopago
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'factura_metodopago', 'codigofactura, codigometodo', :old.codigofactura || ', ' || :old.codigometodo, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/


-- Trigger for the inventario table
CREATE OR REPLACE TRIGGER auditar_inventario
AFTER INSERT OR UPDATE OR DELETE ON inventario
FOR EACH ROW
DECLARE
    v_tipomovimiento VARCHAR2(40);
BEGIN
    -- Determine the type of movement
    IF INSERTING THEN
        v_tipomovimiento := 'Creaci�n';
    ELSIF UPDATING THEN
        v_tipomovimiento := 'Edici�n';
    ELSIF DELETING THEN
        v_tipomovimiento := 'Eliminaci�n';
    END IF;

    -- Register the operation in the bitacora table for inventario
    INSERT INTO bitacora (idbitacora, tabla, campo, llaveprimaria, valoranterior, valornuevo, fechacreacion, tipomovimiento)
    VALUES (bitacora_seq.NEXTVAL, 'inventario', 'codigoinventario', :old.codigoinventario, NULL, NULL, SYSDATE, v_tipomovimiento);
END;
/

CREATE VIEW medication_expiry AS
SELECT codigomedicamento, lote, nombrecomercial, fechavencimiento
FROM medicamento
WHERE fechavencimiento BETWEEN SYSDATE AND SYSDATE + 90;

----procedimiento para calcular el total y el subtotal

CREATE OR REPLACE TRIGGER calcular_subtotal_total
BEFORE INSERT ON Factura
FOR EACH ROW
BEGIN
    :NEW.subtotal := (:NEW.preciounitario * :NEW.cantidad) - :NEW.descuento;
    :NEW.total := :NEW.subtotal * (1 + (:NEW.impuestos / 100));
END;
/



-- Crear el rol de Administrador
CREATE ROLE administrador;

-- Crear el rol de Empleado
CREATE ROLE usuario;


select * from usuario;
select * from persona;
select * from cliente;
select *from bitacora;
select *from factura;

CREATE OR REPLACE PACKAGE laboratorio_pkg AS
  -- Procedimiento para insertar una nueva factura
  PROCEDURE insertar_laboratorio (
    p_codigolaboratorio IN NUMBER,
    p_ubicacionlaboratorio IN VARCHAR2,
    p_nombrelaboratorio IN VARCHAR2,
    p_encargadolaboratorio IN VARCHAR2 
  );

  -- Procedimiento para actualizar una factura existente
  PROCEDURE actualizar_laboratorio (
     p_codigolaboratorio IN NUMBER,
    p_ubicacionlaboratorio IN VARCHAR2,
    p_nombrelaboratorio IN VARCHAR2,
    p_encargadolaboratorio IN VARCHAR2 
  );

  -- Procedimiento para eliminar una factura
  PROCEDURE eliminar_laboratorio (p_codigolaboratorio IN NUMBER);

  -- Función para obtener todas las facturas
  FUNCTION obtener_todos_laboratorios RETURN SYS_REFCURSOR;
END laboratorio_pkg;
/



